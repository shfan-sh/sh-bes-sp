USE [EmailMarketing]
GO

/****** Object:  StoredProcedure [dbo].[GetAbandonBrowseEvent]    Script Date: 3/7/2022 4:57:10 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


create proc [dbo].[GetAbandonBrowseEvent] (
@DateFrom datetime2(3) = null
,@DateTo  datetime2(3) = null)
as

/*The default value of the data range is set to be an hour in order to target users who haven't completed the buyer pipeline in the last hour.*/
/*We exclude bots, and users who have bought or completed the pipeline */

drop table if exists #abandonbrowse;
drop table if exists #anonymousids;
drop table if exists #usersha;
drop table if exists #final;
drop table if exists #eventcount;


if  @DateFrom is null
or  @DateTo is null
begin
    set @DateFrom = dateadd (mi, -80, getutcdate ());
    set @DateTo = dateadd (mi, -60, getutcdate ());
end;
/*20 mins before last hour, need to test how long does this query run*/

/*select stubhub user's browsing activity*/
select  pv.PageVisitID
       ,pv.EventID
       ,pv.CategoryID
       ,pv.VisitDate
       ,pv.AnonymousID
       ,pv.UserID
       ,pv.SiteVisitID
       ,pv.ClientApplicationID
       ,pv.CobrandID
into    #abandonbrowse
from    PageVisitHA.pagevisit.PageVisit pv
where   VisitDate > '2022-02-22'
AND pv.UserID = 'E14CC326-DD12-4B02-BA73-6D35C530F012'
and
MvcArea = 'Browse'
and pv.MvcController like 'event%_%'
and     pv.MvcAction like 'Index%'
and     (case when exists (   select    *
                              from      ViagogoReporting.Report.BotDetectionIPMatch bd
                              where     bd.BotMatchTypeID in ( 1, 4 )
                              and       bd.IP = pv.ip) then 1
              when exists (   select    *
                              from      ViagogoReporting.Report.BotDetectionBrowserAgentMatch bba
                              where     bba.BotMatchTypeID in ( 1, 4 )
                              and       bba.BrowserAgentString = pv.BrowserAgent) then
                  1 else 0 end) <> 1
and     (CobrandID = 2189 -- stubhub us
or     CobrandID = 3001);   -- stubhub ca

/* get user id based on anonymous id */
update      p
set         p.UserID = s.UserID
from        #abandonbrowse p
inner join  #abandonbrowse s
on          s.AnonymousID = p.AnonymousID
and         p.AnonymousID is not null
where       p.UserID is null
and         s.UserID is not null;

/* try to identify UserId from AnonymousId */
select  distinct pldo.AnonymousID
into    #anonymousids
from    #abandonbrowse pldo
where   pldo.UserID is null
and     pldo.AnonymousID is not null;

/* search PV HA  */
select  a.AnonymousID
       ,pv.UserID
       ,pv.VisitDate
into    #usersHA
from    PageVisitHA.pagevisit.PageVisit as pv
join    #anonymousids as a
on      a.AnonymousID = pv.AnonymousID;


/*delete where user id is still null*/
delete  #usersHA
where   UserID is null;


with cte
as (select  uh.AnonymousID
           ,uh.UserID
           ,row_number () over (partition by uh.AnonymousID, uh.UserID order by uh.AnonymousID) rn
    from    #usersHA as uh)
delete  cte
where   rn > 1;

/* only entires with most recent user id - if there is more than 1 per anonymous ids */
with cte
as (select  *
           ,row_number () over (partition by uh.AnonymousID order by uh.VisitDate desc) rn
    from    #usersHA as uh)
delete  cte
where   cte.rn > 1;

/* update anonymous ids where user id has been populated */
update  p
set     p.UserID = uh.UserID
from    #abandonbrowse p
join    #usersHA as uh
on      uh.AnonymousID = p.AnonymousID;

/* BUYER - Remove dropouts where user transacted after @DateFrom based on UserID */
delete      a
from        #abandonbrowse a
left join   viagogo.dbo.[Transaction] t
on          t.TransactionDateTime > @DateFrom
and         a.UserID = t.BuyerUserID
and         t.EventID = a.EventID
where       t.BuyerUserID is not null;

/* BUYER - Remove dropouts where user transacted after @DateFrom based on UserID */
delete      a
from        #abandonbrowse a
left join   viagogo.dbo.[Transaction] t
on          t.TransactionDateTime > @DateFrom
and         a.AnonymousID = t.BuyerAnonymousID
and         t.EventID = a.EventID
where       t.BuyerUserID is not null;



/* final table */
select      d.SiteVisitID
           ,em.EmailID
           ,d.UserID
           ,e.EventID
           ,e.ReportingCategoryID
           ,0 as IsProcessed
           ,ud.AnonymousID
           ,ud.AffiliateID
           ,d.CobrandID PageVisit_AffiliateId
           ,d.ClientApplicationID PageVisit_ClientApplicationId
           ,d.VisitDate as VisitDateTime
into        #final
from        #abandonbrowse as d
join        viagogo.dbo.UserDetail as ud
on          ud.UserID = d.UserID

join        viagogo.dbo.Email as em
on          d.UserID = em.UserID

inner join  viagogo.dbo.Event as e
on          e.EventID = d.EventID
--where      em.EmailAddress not like '%viagogo%'; /*add after testing*/
where       em.EmailAddress like '%viagogo%';   /*for testing*/

/* event aggregate */
select      p.UserID
           ,p.ReportingCategoryID
           ,count (distinct p.EventID) events
into        #eventcount
from        #final as p
group by    p.UserID
           ,p.ReportingCategoryID;


/*Deleting the duplicates and only leaving the most recent entry*/
with cte
as (select  *
           ,rn = row_number () over (partition by d.EmailID order by d.VisitDateTime)
    from    #final as d)
delete  from cte
where   cte.rn > 1;

/* check if categories exist for the affiliate */
update      f
set         f.ReportingCategoryID = coalesce (
                                        dbo.GetCategoryForAffiliate (
                                            f.ReportingCategoryID, a.AffiliateID)
                                       ,usco.OverrideCategoryID
                                       ,-1)
           ,f.AffiliateID = a.AffiliateID
from        #final as f
join        dbo.EmailLocation as el
on          el.EmailId = f.EmailID
and         el.IsDefault = 1

join        viagogo.dbo.Geography g
on          g.GeographyCode = el.CountryCode
cross apply dbo.GetAffiliateForCountryCode_TVF (g.GeographyCode) as a
left join   GoldenData.dbo.UKSpecificCategoryOverride as usco
on          f.ReportingCategoryID = usco.CategoryID
and         el.CountryCode = 'gb'
where       ReportingCategoryID <> coalesce (
                                       dbo.GetCategoryForAffiliate (
                                           f.ReportingCategoryID, a.AffiliateID)
                                      ,usco.OverrideCategoryID
                                      ,-1);
delete  from #final
where   ReportingCategoryID < 0;


/* insert */
insert into ETL.AbandonBrowseEmail (SiteVisitID
                                   ,EmailId
                                   ,EventID
                                   ,CategoryID
                                   ,IsProcessed
                                   ,InsertDate
                                   ,DistinctEventsForCategoryVisited
                                   ,PageVisit_AffiliateId
                                   ,PageVisit_ClientApplicationId
                                   ,AffiliateID
                                   ,AnonymousId
                                   ,VisitDateTime)
select  d.SiteVisitID
       ,d.EmailID
       ,d.EventID
       ,d.ReportingCategoryID as CategoryID
       ,d.IsProcessed
       ,getutcdate () InsertDate
       ,ec.events as DistinctEventsForCategoryVisited
       ,d.PageVisit_AffiliateId
       ,d.PageVisit_ClientApplicationId
       ,d.AffiliateID
       ,try_cast(d.AnonymousID as uniqueidentifier) AnonymousID
       ,VisitDateTime
from    #final as d
join    #eventcount as ec
on      ec.ReportingCategoryID = d.ReportingCategoryID
and     ec.UserID = d.UserID
where   d.AffiliateID is not null;


go


