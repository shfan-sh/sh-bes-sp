USE [EmailMarketing]
GO

/****** Object:  StoredProcedure [EmailSend].[QueueAbandonedBrowseEmail]    Script Date: 3/7/2022 4:59:35 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create   proc [EmailSend].[QueueAbandonedBrowseEmail]
as /*
	-- Get --
	- Get the candidate set of pipeline dropouts from the PipelineDropout table

	-- Validate --
	- Remove any which are not opted in, or are bad emails
	- Remove any which are for events with less than 10 tickets
	- remove users who already got abandon browse email during last 4 hours
	- Remove any which have two send records for the same user in the same hour (shouldn't happen, but don't take it on trust!)
	- Remove any which are missing translations of the content items (using the LCID in the pipeline dropout email)
	-- Push --
	- Create a row in the EmailSend.SingleCategory table
	- Link the pipeline dropout record (ETL.AbandonBrowseEmail) to this row
	- Mark the data as sent in PipelineDropout and SingleCategory

*/

declare @SUBJECT_CONTENT_ID int = 2442307;/*change!*/
declare @MAIN_CONTENT_ID int = 2442307;/*change!*/
declare @SECONDARY_CONTENT_ID int = 2442308;/*change!*/

declare @SUBJECT_CONTENT int =
            (   select ContentID
                from   dbo.GetContent_TVF(@SUBJECT_CONTENT_ID) );
declare @MAIN_CONTENT int =
            (   select ContentID
                from   dbo.GetContent_TVF(@MAIN_CONTENT_ID) );
declare @SECONDARY_CONTENT int =
            (   select ContentID
                from   dbo.GetContent_TVF(@SECONDARY_CONTENT_ID) );


declare @XTIX_AFFILIATE_ID int = 2188,
        @CLIENT_APPLICATION_ID_PRIMARY_DESKTOP int = 310,
        @CLIENT_APPLICATION_ID_PRIMARY_MOBILE int = 311;

if object_id('tempdb.dbo.#dropoutsToProcess') is not null
begin
    drop table #dropoutsToProcess;
end;


select      e.IsBadEmail,
            lt.LCID,
            loc.CountryCode,
            e.EmailID,
            pd.CategoryID,
            pd.EventID,
            pd.visitdatetime,
            pd.InsertDate,
            c.CategoryImageVersion,
            pd.IsProcessed,
            pd.ID,
            cast(0 as bit) as ShouldSend,
            a.RootURL,
            a.AffiliateID,
            pd.PageVisit_AffiliateId,
            pd.PageVisit_ClientApplicationId
into        #dropoutsToProcess
from        EmailMarketing.ETL.AbandonBrowseEmail as pd
join        viagogo.dbo.Email as e on e.EmailID = pd.EmailId
join        viagogo.dbo.EmailPreferences ep on ep.EmailID = e.EmailID
                                               and ep.IsOptedIn = 1
cross apply dbo.GetLCIDForEmailID_tvf(e.EmailID) as lt
join        viagogo.dbo.Affiliate as a on a.AffiliateID = pd.AffiliateID
                                          and a.IsActive = 1
                                          and a.IsCobrand = 1
left join   EmailMarketing.dbo.EmailLocation as loc on loc.EmailId = e.EmailID
                                                       and loc.IsDefault = 1
left join   viagogo.dbo.Category as c on c.CategoryID = pd.CategoryID
where       pd.IsProcessed = 0;


/*remove xtixs*/
update pd
set    pd.IsProcessed = 1
from   ETL.AbandonBrowseEmail as pd
join   #dropoutsToProcess as dtp on dtp.ID = pd.ID
                                    and dtp.PageVisit_AffiliateId = @XTIX_AFFILIATE_ID;

delete #dropoutsToProcess
where  PageVisit_AffiliateId = @XTIX_AFFILIATE_ID;


update pd
set    pd.IsProcessed = 1
from   ETL.AbandonBrowseEmail as pd
join   #dropoutsToProcess as dtp on dtp.ID = pd.ID
                                    and dtp.PageVisit_ClientApplicationId in ( @CLIENT_APPLICATION_ID_PRIMARY_DESKTOP,
                                                                           @CLIENT_APPLICATION_ID_PRIMARY_MOBILE );

delete #dropoutsToProcess
where  PageVisit_ClientApplicationId in ( @CLIENT_APPLICATION_ID_PRIMARY_DESKTOP, @CLIENT_APPLICATION_ID_PRIMARY_MOBILE );


/* remove entires older than 72h */
update pd
set    pd.IsProcessed = 1
from   ETL.AbandonBrowseEmail as pd
join   #dropoutsToProcess as dtp on dtp.ID = pd.ID
where  dtp.visitdatetime < dateadd(hour, -72, getutcdate());


delete dtp
from   #dropoutsToProcess as dtp
where  dtp.visitdatetime < dateadd(hour, -72, getutcdate());


/*remove users who already got abandon browse email during last 4 hours*/
--update pd
--set    pd.IsProcessed = 1
--from   ETL.AbandonBrowseEmail as pd
--join EmailSend.SingleCategory sc on pd.EmailID = sc.EmailId and sc.emailtypeid = 48 /*abandon browse*/ and sc.SendDateTime >dateadd(hour, -4, getutcdate());

--delete a
--from #dropoutsToProcess a
--join EmailSend.SingleCategory sc on a.EmailID = sc.EmailId and sc.emailtypeid = 48 /*abandon browse*/ and sc.SendDateTime >dateadd(hour, -4, getutcdate());



/* Right now only certain images exist. */
update #dropoutsToProcess
set    ShouldSend = 1
where  IsBadEmail = 0;

/* Remove any events with no tickets */
--with ticketCheck
--as ( select dtp.ShouldSend
--     from   #dropoutsToProcess as dtp
--     join   viagogo.dbo.Event as e on e.EventID = dtp.EventID
--     where  coalesce(
--                (   select sum(l.AvailableTickets)
--                    from   viagogo.dbo.Listing as l
--                    where  l.EventID = e.EventID
--                           and l.ListingStateID = 1 ),
--                0) < 10
--            and dtp.ShouldSend = 1 )
--update ticketCheck
--set    ShouldSend = 0;

/* Remove any users who have received another pipeline dropout in the last 24 hours */
--with cte
--as ( select dtp.ShouldSend
--     from   #dropoutsToProcess as dtp
--     where  exists
--         (   select 1
--             from   EmailSend.SingleCategory as sc
--             where  sc.EmailId = dtp.EmailID
--                    and sc.EmailStatusId not in ( 1, 2 ) /* Cancelled, Failed Validation */
--                    and sc.SendDateTime >= dateadd(day, -1, getutcdate()))
--            or exists
--         (   select 1
--             from   EmailSend.SingleEvent se
--             where  se.EmailId = dtp.EmailID
--                    and se.EmailStatusId not in ( 1, 2 ) /* Cancelled, Failed Validation */
--                    and se.SendDateTime >= dateadd(day, -1, getutcdate()))
--               and dtp.ShouldSend = 1 )
--update cte
--set    cte.ShouldSend = 0;

/* Only send 1 record per email */
with cte
as ( select row_number() over ( partition by dtp.EmailID
                                order by dtp.InsertDate desc ) as rn,
            dtp.ShouldSend
     from   #dropoutsToProcess as dtp
     where  dtp.ShouldSend = 1 )
update cte
set    cte.ShouldSend = 0
where  rn > 1;

/* Check for missing translations */
with cte
as ( select ShouldSend
     from   #dropoutsToProcess as dtp
     where  dtp.ShouldSend = 1
            and
                (   not exists
         (   select 1
             from   viagogo.dbo.ContentText as ct
             where  ct.ContentID = @MAIN_CONTENT
                    and ct.LCID = dtp.LCID )
                    or not exists
         (   select 1
             from   viagogo.dbo.ContentText as ct
             where  ct.ContentID = @SUBJECT_CONTENT
                    and ct.LCID = dtp.LCID )
                    or not exists
         (   select 1
             from   viagogo.dbo.ContentText as ct
             where  ct.ContentID = @SECONDARY_CONTENT
                    and ct.LCID = dtp.LCID )))
update cte
set    cte.ShouldSend = 0;

/*  SEND */

/* Make updates transactionally:
	- Update the pipeline dropout table to mark rows as processed
	- Queue any single category emails
	- Update the pipeline dropout table with details of the queued message
*/
begin tran;
begin try
    update pd
    set    IsProcessed = 1
    from   ETL.AbandonBrowseEmail as pd
    join   #dropoutsToProcess as dtp on dtp.ID = pd.ID;


    declare @batchID int;

    if exists
        (   select b.BatchID
            from   EmailSend.Batch as b
            where  b.EmailTypeID = 48
                   and b.EmailTemplateID = 1
                   and cast(b.SendDateTime as date) = cast(getutcdate() as date))
    begin
        set @batchID =
            (   select   top 1 b.BatchID
                from     EmailSend.Batch as b
                where    b.EmailTypeID = 48
                         and b.EmailTemplateID = 1
                         and cast(b.SendDateTime as date) = cast(getutcdate() as date)
                order by b.SendDateTime desc );
    end;
    else
    begin
        insert into EmailSend.Batch
            ( SendDateTime,
              CountryCode,
              EmailSendCount,
              BatchDescription,
              EmailTypeID,
              BatchStatusID,
              EmailTemplateID )
        values
            ( cast(getutcdate() as date), -- SendDateTime - datetime
              null,                       -- CountryCode - varchar(2)
              null,                       -- EmailSendCount - bigint
              'Abandon Browse', 48,          --abandon cart
              0,                          --inserted
              1 );
        set @batchID = scope_identity();
    end;


    declare @inserted table
        (
        EmailSendCommandId bigint,
        ID int
        );

    merge into EmailSend.SingleCategory as tgt
    using
        (   select *
            from   #dropoutsToProcess as dtp
            where  dtp.ShouldSend = 1 ) as src
    on 1 = 0
    when not matched
        then insert
                 ( EmailTemplateId,
                   EmailId,
                   PCID,
                   LCID,
                   SendDateTime,
                   SubjectContentId,
                   MainContentId,
                   SecondaryContentId,
                   MainCategoryId,
                   EmailStatusId,
                   EmailTypeId,
                   BatchID,
                   TemplateContentId,
                   AffiliateID,
                   FromEmailId )
             values
                 ( 1, src.EmailID, 'EMABANDONBROWSE', case
                                                         /* English fallbacks */
                                                         when LCID in ( 2057, 1033, 3081 )
                                                             then 2057
                                                         /* Spanish fallbacks */
                                                         when LCID in ( 1034, 2058, 9226, 11274 )
                                                             then 1034
                                                         /* Portugese fallbacks */
                                                         when LCID in ( 1046, 2070 )
                                                             then 1046
                                                         /* Chinese fallbacks */
                                                         when LCID in ( 2052, 3076 )
                                                             then 2052
                                                         else LCID
                                                    end, getutcdate(), @SUBJECT_CONTENT_ID, @MAIN_CONTENT_ID,
                   @SECONDARY_CONTENT_ID, src.CategoryID, 0, 48, /* Abandon Browse*/
                   @batchID, 1968855,                           --Single Category
                   src.AffiliateID, 3 )
    output Inserted.EmailSendCommandId,
           src.ID
    into @inserted;

    update    sc
    set       sc.FeedbackId = '0:2:' + ( coalesce(el.CountryCode, 'ZZ')) + ':VIAGOGO'
    from      EmailSend.SingleCategory sc
    left join dbo.EmailLocation el on el.EmailId = sc.EmailId
                                      and el.IsDefault = 1
    where     sc.BatchID = @batchID
              and sc.FeedbackId is null;

    update pd
    set    pd.EmailSendCommandId = i.EmailSendCommandId
    from   ETL.AbandonBrowseEmail as pd
    join   @inserted as i on i.ID = pd.ID;


    commit tran;
end try
begin catch
    rollback;
    throw;
end catch;

/* Validate the table and queue an upload */
exec EmailSend.ValidateSingleCategory;

declare @minEmailSendID bigint =
            (   select min(sc.EmailSendCommandId)
                from   EmailSend.SingleCategory as sc
                where  sc.EmailTypeId in ( 48)
                       and sc.EmailStatusId = 5
                       and sc.BatchID = @batchID );
declare @maxEmailSendID bigint =
            (   select max(sc.EmailSendCommandId)
                from   EmailSend.SingleCategory as sc
                where  sc.EmailTypeId in ( 48 )
                       and sc.EmailStatusId = 5
                       and sc.BatchID = @batchID );

select sc.EmailSendCommandId,
       identity(int, 1, 1) id
into   #temp
from   EmailSend.SingleCategory as sc
where  sc.EmailSendCommandId >= @minEmailSendID
       and sc.EmailSendCommandId <= @maxEmailSendID
       and sc.EmailTypeId in ( 48 ) --test, abandon browse
       and sc.EmailStatusId = 5
       and sc.BatchID = @batchID;

declare @i int = 1;
declare @max int =
            (   select max(t.id)
                from   #temp as t );

while @i <= @max
begin

    declare @emailsendid bigint =
                (   select t.EmailSendCommandId
                    from   #temp as t
                    where  t.id = @i );
    declare @message xml = N'
<SendMailCommand>
  <MailProfileName>marketing</MailProfileName>
  <StoredProcedure>
    <Name>EmailMarketing.AppEmailListener.DequeueSingleCategory</Name>
    <Parameters>
	<Parameter Name="EmailSendID" Type="bigint"><Value>' + cast(@emailsendid as varchar(20))
                           + '</Value></Parameter>
    </Parameters>
  </StoredProcedure>
  <SaveBody>false</SaveBody>
</SendMailCommand>
'   ;


    exec dbo.QueueBulkEmailSendMessage @Message = @message,
                                       @MessageType = 'BulkEmailSendCommand';

    if @i % 1000 = 0
    begin
        exec dbo.InsertEventNotification 'ClusteredBulkEmailSendQueue';
        exec dbo.InsertEventNotification 'ClusteredBulkEmailSendIndividualQueue';
    end;


    set @i = @i + 1;
end;

update EmailSend.Batch
set    EmailSendCount = EmailSendCount + @max,
       BatchStatusID = 2
where  EmailSend.Batch.BatchID = @batchID;
go


